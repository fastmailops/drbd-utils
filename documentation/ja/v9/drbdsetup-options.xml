<?xml version="1.0" encoding="UTF-8"?>
<drbdsetup_options>
  <drbdsetup_option name="al-extents">
    <term xml:id="al-extents"><option>al-extents <replaceable>extents</replaceable></option>
    </term>

    <definition>
      <para><indexterm significance="normal">
	  <primary>drbd.conf</primary>

	  <secondary>al-extents</secondary>
	</indexterm>DRBD は、直近の書き込み活動に基づいて、すぐに書き直される可能性のある「ホット」または「アクティブ」ディスク領域を自動的に維持する。「アクティブ」ディスク領域はすぐに書き込むことができるが、「非アクティブ」ディスク領域は最初に「アクティブ化」する必要があり、このためのメタデータ書き込みが必要である。このアクティブなディスク領域を「アクティビティログ」として参照する。</para>

      <para>アクティビティーログはメタデータに書き込まれるが、失敗したノードのリカバリー時にはログ全体を再同期化する必要がある。アクティビティログのサイズは、再同期にかかる時間やクラッシュ後に複製されるディスクが整合状態になる時間に影響を与える。</para>

      <para>アクティビティログは、4メガバイトのセグメントから構成される。その <replaceable>al-extents</replaceable> パラメータは、同時にアクティブにできるセグメントの数を決定する。<replaceable>al-extents</replaceable> のデフォルト値は 1237、 最小値は 7、 最大値は 65536 である。</para>
      <para>有効な最大値はもっと小さくなる点に注意が必要であり、メタデータのデバイスの作成方法によっても異なる。次のマニュアルページを参照、<citerefentry><refentrytitle>drbdmeta</refentrytitle><manvolnum>8</manvolnum></citerefentry>。有効な最大値は 919 *  (使用できる オンディスクのアクティビティログのリングバッファ領域 /4KB -1)  である。リングバッファはデフォルトで 32KB で、有効な最大値は 6433 である (データは 25GiB 以上カバーしている)。下位デバイスの量とレプリケーションリンク全体が 5 分以内で再同期できるようにすることを推奨する。</para>
    </definition>
  </drbdsetup_option>

  <drbdsetup_option name="al-updates">
    <term xml:id="al-updates"><option>al-updates
	<group choice="req" rep="norepeat">
	  <arg choice="plain" rep="norepeat">yes</arg>
	  <arg choice="plain" rep="norepeat">no</arg>
        </group>
      </option>
    </term>

    <definition>
      <para><indexterm significance="normal">
	  <primary>drbd.conf</primary>
	  <secondary>al-updates</secondary>
	</indexterm>このパラメータを使用すると、アクティビティログを完全にオフにすることができる（<option>al-extents</option> パラメータを参照）。メタデータの書き込みが少なくて済むため、書き込みが高速になるが、故障したプライマリノードの回復のためにデバイス全体を再同期する必要がある。<option>al-updates</option> のデフォルト値は <option>yes</option> である。</para>
    </definition>
  </drbdsetup_option>

  <drbdsetup_option name="c-delay-target">
    <term xml:id="c-delay-target"><option>c-delay-target <replaceable>delay_target</replaceable></option></term>

    <term xml:id="c-fill-target"><option>c-fill-target <replaceable>fill_target</replaceable></option></term>

    <term xml:id="c-max-rate"><option>c-max-rate <replaceable>max_rate</replaceable></option></term>

    <term xml:id="c-plan-ahead"><option>c-plan-ahead <replaceable>plan_time</replaceable></option></term>

    <definition>
      <para>再同期速度を動的に制御する。これは <option>c-plan-ahead</option> を正の値に設定すると有効になる。<option>c-fill-target</option> が指定されている場合は、バッファが指定された値を満たすよう、<option>c-delay-target</option> が指定されている場合は、指定した遅延になるように制御する。最大帯域幅は、 <option>c-max-rate</option> で制限する。</para>

      <para><option>c-plan-ahead</option> は、DRBD が再同期速度の変化にどのくらい速く適応するかを定義する。ネットワークのラウンドトリップタイム (RTT) の 5 倍以上に設定するのが望まれる。「通常の」データパスで <option>c-fill-target</option> の共通の値の範囲は 4K から 100K である。drbd-proxy を使用している場合は、 <option>c-fill-target</option> の代わりに <option>c-delay-target</option> を使用することを推奨する。<option>c-delay-target</option> は、 <option>c-fill-target</option> が定義されていないか、または 0 に設定されているときに使用される。<option>c-delay-target</option> は、ネットワークのラウンドトリップタイム (RTT) の 5 倍以上に設定するのが望まれる。<option>c-max-rate</option> には DRBD 間または DRBD-Proxy 間の帯域幅あるいはディスク帯域幅を指定する。</para>

      <para>これらのパラメータのデフォルト値は次のとおり。 <option>c-plan-ahead</option> = 20 （0.1 秒単位）、 <option>c-fill-target</option> = 0 （セクタ単位）、 <option>c-delay-target</option> = 1 （単位 0.1 秒）、および <option>c-max-rate</option> = 102400 （単位 KiB/s）。</para>

      <para>動的な再同期速度制御は DRBD 8.3.9 から有効である。</para>
    </definition>
  </drbdsetup_option>

  <drbdsetup_option name="c-min-rate">
    <term xml:id="c-min-rate"><option>c-min-rate <replaceable>min_rate</replaceable></option></term>

    <definition>
      <para>同期元のプライマリノードは、アプリケーションの書き込みと再同期の書き込みの配分を管理する必要がある。<option>c-min-rate</option> は、再同期の書き込みに使用できる帯域幅を制限する。残りの帯域幅はアプリケーションの書き込みに使用される。</para>

      <para><option>c-min-rate</option> の値 0 は、再同期の書き込みに使用できる帯域幅に制限がないことを意味する。これにより、アプリケーションの書き込みが大幅に遅くなる可能性がある。再同期速度の最低値は 1（1 KiB/s） である。</para>

      <para><option>c-min-rate</option> のデフォルト値は 4096 で、 単位は KiB/s である。</para>
    </definition>
  </drbdsetup_option>

  <drbdsetup_option name="disk-barrier">
    <term xml:id="disk-barrier"><option>disk-barrier</option></term>

    <term xml:id="disk-flushes"><option>disk-flushes</option></term>

    <term xml:id="disk-drain"><option>disk-drain</option></term>

    <definition>
      <indexterm significance="normal">
	<primary>drbd.conf</primary>
	<secondary>disk-barrier</secondary>
      </indexterm>

      <indexterm significance="normal">
	<primary>drbd.conf</primary>

	<secondary>disk-flushes</secondary>
      </indexterm>

      <indexterm significance="normal">
	<primary>drbd.conf</primary>
	<secondary>disk-drain</secondary>
      </indexterm>

      <para>DRBD は、依存書き込みリクエストの順序を処理する 3 つの方法がある: <variablelist>
	  <varlistentry>
	    <term><option>disk-barrier</option></term>
	    <listitem>
	      <para>ディスクバリアを使用して、リクエストが正しい順序でディスクに書き込まれるようにする。バリアの前に提出されたすべてのリクエストが、バリアの後に提出されたリクエストの前にディスクに書き込まれることを保証する。これは、SCSI デバイスの 'tagged command queuing' と SATA デバイスの 'native command queuing' を使用して実装される。一部のデバイスおよびデバイススタックのみがこの方法をサポートする。デバイスマッパー （LVM） は、一部の構成でのみバリアをサポートする。</para>

	      <para>ディスクバリアをサポートしていないシステムで、このオプションを有効にするとデータが消失または破損する可能性がある。DRBD 8.4.1 までは、下位デバイスがバリアをサポートする場合 <option>disk-barrier</option> が有効でした。しかし、linux-2.6.36 （または RHEL6 の 2.6.32） 以降のカーネルでは、バリアがサポートされているかどうかを検出できなくなりました。drbd-8.4.2 以降、このオプションはデフォルトでは無効であり、使用する場合は明示的に有効にする必要がある。</para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><option>disk-flushes</option></term>
	    <listitem>
	      <para>依存書き込みリクエスト間でディスクフラッシュを使用する（ドライブベンダーにより 'force unit access' とも呼ばれる）。これにより、すべてのデータが強制的にディスクに格納される。このオプションは、デフォルトで有効である。</para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><option>disk-drain</option></term>
	    <listitem>
	      <para>依存書き込みリクエストを送信する前に、リクエストキューが排出されるまで待つ（つまり、リクエストが完了するのを待つ）。この方法は、リクエストが完了するとディスク上で安定している。DRBD 8.0.9 より前は、これが実装された唯一の方法でした。このオプションは、デフォルトで有効である。運用環境では無効にしないことを推奨する。</para>
	    </listitem>
	  </varlistentry>
	</variablelist>これらの3つの方法から、DRBD は設定が有効で、下位デバイスもサポートしている最初のものを使用する。これらの3つのオプションがすべて無効になっている場合、DRBD は依存関係を気にせずに書き込みリクエストを送信する。下位デバイスによって、書き込みリクエストを並べ替えることができ、異なるクラスタノード上で異なる順序で書き込みリクエストを送信できる。これは、データの損失または破損の原因となる。したがって、書き込み順序を制御する 3 つの方法をすべて無効にしないことを推奨する。</para>

      <para>書込み順序を設定する一般的なガイドラインは、揮発性書込みキャッシュを備えた通常のディスク（または通常のディスクアレイ）を使用する場合は、disk-barrier または disk-flushes を使用することである。キャッシュを持たないストレージまたはバッテリバックアップのライトキャッシュでは、 disk-drain が適している。</para>
    </definition>
  </drbdsetup_option>

  <drbdsetup_option name="disk-timeout">
    <term xml:id="disk-timeout"> <option>disk-timeout</option>
    </term>
    <definition>
      <indexterm significance="normal">
	<primary>drbd.conf</primary>
	<secondary>disk-timeout</secondary>
      </indexterm>
      <para>DRBD デバイスのデータを格納する下位レベルデバイスが、指定した <option>disk-timeout</option> 以内で I/O リクエストを完了しない場合、DRBD はこれを障害とみなす。下位デバイスは切り離され、デバイスのディスク状態はディスクレス状態になる。DRBD が 1 台以上の対向ノードに接続したとき、失敗したリクエストはそのうちの 1 台に伝えられる。</para>

      <para>このオプションは <emphasis>カーネルパニックを引き起こす可能性があり、注意が必要である</emphasis>。</para>

      <para>リクエストの「中断」あるいはディスクの強制切り離しは、完全に下位デバイスをブロックまたはハンギングして、リクエストをまったく処理せずエラーも処理しなくなる。この状況ではハードリセットとフェイルオーバ以外になす術がない。</para>

      <para>「中断」すると、基本的にローカルエラーの完了を装い、すみやかにサービスの移行を行うことで安全な切り替えを行う。それでもなお、影響を受けるノードは &quot;すぐ&quot; に再起動される必要はある。</para>
      <para>リクエストを完了することで、上位レイヤーに関連するデータページを再利用させることができる。</para>

      <para>後にローカルの下位デバイスが「復帰」すると、ディスクから元のリクエストページへの DMA のデータは、うまくいくと未使用のページへランダムなデータを送るが、多くの場合その間に関係のないデータに変形してしまい、様々なダメージの原因になる。</para>

      <para>つまり遅延した正常な完了は、特に読み込みリクエストの場合 panic() の原因になる。遅延した「エラー」完了は、その都度に通知は行うが、問題ないと考えてよい。</para>
      <para><option>disk-timeout</option> のデフォルト値は 0 であり、無限のタイムアウトを意味する。タイムアウトは 0.1 秒単位で指定する。このオプションは DRBD 8.3.12. から有効である。</para>
    </definition>
  </drbdsetup_option>

  <drbdsetup_option name="fencing">
    <term xml:id="fencing"><option>fencing <replaceable>fencing_policy</replaceable></option></term>

    <definition>
      <para><indexterm significance="normal">
	  <primary>drbd.conf</primary>

	  <secondary>fencing</secondary>
	</indexterm> <option>フェンシング</option>は、両方のノードがプライマリで切断されている状態を回避するための予防措置である。これはスプリットブレイン状態とも呼ばれている。DRBDは、次のフェンシングポリシーをサポートする：</para>

      <variablelist>
	<varlistentry>
	  <term xml:id="dont-care"><option>dont-care</option></term>

	  <listitem>
	    <para>フェンシングのためのアクションを実行しない。これがデフォルトのポリシーである。</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term xml:id="resource-only"><option>resource-only</option></term>

	  <listitem>
	    <para>ノードが切り離されたプライマリ状態になると、対向ノードをフェンシングしようとする。この動作は <option>fence-peer</option> ハンドラによって行われる。このハンドラは、レプリケーション用とは別のネットワーク経由で対向ノードにアクセスし、 そこで '<option>drbdadm outdate minor</option>' の実行を想定する。</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term xml:id="resource-and-stonith"><option>resource-and-stonith</option></term>

	  <listitem>
	    <para>ノードが切り離されたプライマリ状態になると、 DRBD はすべてのディスク I/O を停止して fence-peer ハンドラを呼び出す。このハンドラは、レプリケーション用とは別のネットワーク経由で対向ノードにアクセスし、 そこで '<option>drbdadm outdate minor</option>' の実行を想定する。これが実行できない場合、 STONITH 機能を使って対向ノードを強制排除する。これらが完了したら、ディスク I/O を再開する。fence-peer ハンドラが失敗した場合、 '<option>drbdadm resume-io</option>' コマンドでディスク I/O を再開できる。</para>
	  </listitem>
	</varlistentry>
      </variablelist>
    </definition>
  </drbdsetup_option>

  <drbdsetup_option name="md-flushes">
    <term xml:id="md-flushes"><option>md-flushes</option></term>

    <definition>
      <indexterm significance="normal">
	<primary>drbd.conf</primary>

	<secondary>md-flushes</secondary>
      </indexterm>

      <para>メタデータデバイスでディスクフラッシュとディスクバリアを有効にする。このオプションは、デフォルトで有効である。<option>disk-flushes</option> のパラーメータを参照。</para>
    </definition>
  </drbdsetup_option>

  <drbdsetup_option name="on-io-error">
    <term xml:id="on-io-error"><option>on-io-error <replaceable>handler</replaceable></option></term>

    <definition>
      <para><indexterm significance="normal">
	  <primary>drbd.conf</primary>

	  <secondary>on-io-error</secondary>
	</indexterm>DRBD が下位レベルデバイスの I/O エラーにどのように反応するかを設定する。次のポリシーが定義される: <variablelist>
	  <varlistentry>
	    <term xml:id="pass_on"><option>pass_on</option></term>
	    <listitem>
	      <para>ディスクのステータスを inconsistent(不整合) にし、 I/O エラーを起こしたブロックに対応するビットマップにマークをつけ、リモートのクラスターノード上で I/O 操作を再度行う。</para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term xml:id="call-local-io-error"><option>call-local-io-error</option></term>
	    <listitem>
	      <para><option>local-io-error</option> ハンドラを呼び出す (<option>handlers</option> セクションを参照)。</para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term xml:id="detach"><option>detach</option></term>
	    <listitem>
	      <para>下位レベルデバイスを切り離し、ディスクレスモードで続行する。</para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </para>
    </definition>
  </drbdsetup_option>

  <drbdsetup_option name="read-balancing">
    <term xml:id="read-balancing"><option>read-balancing <replaceable>policy</replaceable></option>
    </term>
    <definition>
      <indexterm significance="normal">
	<primary>drbd.conf</primary>
	<secondary>read-balancing</secondary>
      </indexterm>
      <para><replaceable>policy</replaceable> 定義された読み取りリクエストで、クラスターノード間に負荷分散する。次のポリシーがサポートされる: <option xml:id="prefer-local">prefer-local</option> (デフォルト), <option xml:id="prefer-remote">prefer-remote</option>, <option xml:id="round-robin">round-robin</option>, <option xml:id="least-pending">least-pending</option>, <option xml:id="when-congested-remote">when-congested-remote</option>, <option xml:id="_32K-striping">32K-striping</option>, <option xml:id="_64K-striping">64K-striping</option>, <option xml:id="_128K-striping">128K-striping</option>, <option xml:id="_256K-striping">256K-striping</option>, <option xml:id="_512K-striping">512K-striping</option> and <option xml:id="_1M-striping">1M-striping</option>.</para>
	<para>このオプションは、DRBD 8.4.1 から有効である。</para>
    </definition>
  </drbdsetup_option>


  <drbdsetup_option name="discard-zeroes-if-aligned">
    <term xml:id="discard-zeroes-if-aligned"><option>discard-zeroes-if-aligned <group choice="req" rep="norepeat">
    <arg choice="plain" rep="norepeat">yes</arg>
    <arg choice="plain" rep="norepeat">no</arg>
    </group></option></term>
    <definition>
      <para>
        <indexterm significance="normal">
          <primary>drbd.conf</primary>
          <secondary>discard-zeroes-if-aligned</secondary>
        </indexterm>Linux のブロックデバイスで discard/trim/unmap のサポートにはいくつかの側面がある。discard が一般的にサポートされていても、暗黙に失敗したり、discard リクエストを部分的に無視したりすることがある。デバイスは、また、マップされていないブロックからの読み込みが、定義済みのデータ（通常はゼロ）、未定義のデータ（おそらく古いデータか、ゴミ）のどちらを返すか通知する。</para><para>異なるノードで DRBD が discard 特性が異なるデバイスによって構成されている場合、discard はデータの不一致（古いデータまたはゴミが 1 つのバックエンドに残り、別のバックエンドではゼロが残る）の原因となる。オンライン照合は、数多くの偽の差異を報告する可能性がある。たぶんほとんどのユースケース （ファイルシステム上の fstrim） では無害であるが、DRBD はそれを持つことはできない。</para><para>安全に動作させるには、ローカルのバックエンド（プライマリ上）が &quot;discard_zeroes_data=true&quot; をサポートしていない場合、 discard のサポートを無効にする必要がある。受信側（セカンダリ）がマップされていなかった領域を割り当て、 &quot;discard_zeroes_data = true&quot; をサポートしていない場合、受信側で discard を明示的にゼロに変換する必要がある。</para><para>discard をサポートしているのに、discard_zeroes_data = false をアナウンスするデバイス（特に LVM/DM シンプロビジョニング）がある。DM-thin の場合、チャンクサイズに合わせた discard はマップされず、マッピングされていないセクタからの読み込みはゼロを返す。ただし、discard リクエストのアライメントされていない部分ヘッドまたはテール領域は暗黙に無視する。</para><para>整列したフル・チャンクの discard をパスし、これらの整列していない部分領域を明示的にゼロ・アウトするヘルパーを追加すると、そのようなデバイスでは discard_zeroes_data = true を効果的に達成する。</para><para><option> discard-zeroes-if-aligned </option> を <option>yes</option> に設定すると、 discard_zeroes_data = false を通知するバックエンドであっても DRBD は discard を使用し、 discard_zeroes_data = true を通知する。</para><para><option> discard-zeroes-if-aligned </option> を <option>no</option> に設定すると、それぞれのバックエンドが discard_zeroes_data = false をアナウンスする場合、DRBD は常に受信側でゼロアウトにフォールバックし、プライマリ側では discard に関して通知しない。</para><para>私たちは、 discard_zeroes_data 設定を完全に無視していました。確立し、期待された動作を壊さず、シンプロビジョニング LV の fstrim がスペースを解放する代わりにスペースを使い果たさないためのデフォルト値は <option>yes</option> である。</para><para>このオプションは 8.4.7 から有効である。</para>
    </definition>
  </drbdsetup_option>

  <drbdsetup_option name="rs-discard-granularity">
    <term>
      <option>rs-discard-granularity <replaceable>byte</replaceable></option>
    </term>
    <definition>
      <indexterm significance="normal">
        <primary>drbd.conf</primary>
        <secondary>rs-discard-granularity</secondary>
      </indexterm>
      <para><option> rs-discard-granularity </option> がゼロ以外の正の値に設定されている場合、DRBD はこのサイズで再同期操作をリクエストする。そのようなブロックが同期ソースノード上にゼロバイトしか含まない場合、同期ターゲットノードは、その領域に対して discard/trim/unmap コマンドを発行する。</para>
	<para>この値は、下位ブロックデバイスの discard 粒度によって制約される。<option> rs-discard-granularity </option>が下位ブロックデバイスの discard 粒度の乗数でない場合、DRBD はそれを切り上げる。この機能は、下位ブロックデバイスが discard コマンドの後に、ゼロを読み戻す場合にのみアクティブになる。</para>
        <para>デフォルト値は 0 である。このオプションは 8.4.7 から有効である。</para>
    </definition>
  </drbdsetup_option>

  <drbdsetup_option name="resync-after">
      <term xml:id="resync-after">
	<only-drbdsetup>
	  <option>resync-after <replaceable>minor</replaceable></option>
	</only-drbdsetup>
	<only-drbd-conf>
	  <option>resync-after <replaceable>res-name</replaceable>/<replaceable>volume</replaceable></option>
	</only-drbd-conf>
      </term>

    <definition>
      <para><indexterm significance="normal">
	  <primary>drbd.conf</primary>

	  <secondary>resync-after</secondary>
	</indexterm>デバイスは、指定されたデバイスの後でのみ再同期する必要があることを定義する。デフォルトでは、デバイス間の順序は定義されず、すべてのデバイスが並行して再同期される。下位レベルデバイスの構成、および使用可能なネットワークとディスクの帯域幅によっては、全体の再同期プロセスが遅くなる可能性がある。このオプションは、デバイス間の依存関係チェーンやツリーを形成するために使用できる。</para>
    </definition>
  </drbdsetup_option>

  <drbdsetup_option name="resync-rate">
    <term xml:id="resync-rate"><option>resync-rate <replaceable>rate</replaceable></option></term>

    <definition>
      <para><indexterm significance="normal">
	  <primary>drbd.conf</primary>

	  <secondary>resync-rate</secondary>
	</indexterm>DRBD が再同期に使用できる帯域幅を定義する。DRBD では、再同期中でも「通常の」アプリケーション I/O が可能である。再同期の帯域幅が大きすぎると、アプリケーション I/O が非常に遅くなる可能性がある。このパラメータは、これを避けることができる。これは、動的な再同期コントローラが無効の場合にのみ機能する。</para>
    </definition>
  </drbdsetup_option>

  <drbdsetup_option name="size">
    <!-- NOTE: This description is neither used in drbd.conf.xml.in nor in
	 drbdsetup.xml.in. -->
    <term xml:id="size"><option>size <replaceable>size</replaceable></option></term>

    <definition>
      <para>下位レベルデバイスのサイズを自動的に決定するのではなく、明示的に指定する。デバイスサイズは一度決定されると、デバイスのライフタイムの間、維持される。自動的に決定するには、すべてのノードのすべての下位レベルデバイスの接続が必要であるが、サイズが明示的に指定されている場合は、これが必要でない。<option>size</option> 値はデフォルトでセクタ （512バイト） 単位であるとみなされる。</para>

      <!-- FIXME:
	The <option>- - size</option> option should only be used if you wish not
	to use as much as possible from the backing block devices. If you do
	not use <option>-d</option>, the <replaceable>device</replaceable> is
	only ready for use as soon as it was connected to its peer once.
	-->

      <!--
	<para>If you use the <replaceable>size</replaceable> parameter in
	drbd.conf, we strongly recommend to add an explicit unit postfix.
	drbdadm and drbdsetup used to have mismatching default units.</para>
      -->
    </definition>
  </drbdsetup_option>

  <drbdsetup_option name="dialog-refresh">
    <term xml:id="dialog-refresh"><option>dialog-refresh <replaceable>time</replaceable></option></term>

    <definition>
      <para><indexterm significance="normal">
	  <primary>drbd.conf</primary>

	  <secondary>dialog-refresh</secondary>
	</indexterm>DRBD init スクリプトを使用してDRBD デバイスを構成および起動することができる。これには、他のクラスタノードを待機する必要がある。待機中、init スクリプトは残りの待機時間を表示する。<option>dialog-refresh</option> は、そのカウントダウンの更新間隔（秒）を定義する。デフォルト値は 1 で、0 はカウントダウンを無効にする。</para>
    </definition>
  </drbdsetup_option>

  <drbdsetup_option name="disable-ip-verification">
    <term xml:id="disable-ip-verification"><option>disable-ip-verification</option></term>

    <definition>
      <indexterm significance="normal">
	<primary>drbd.conf</primary>

	<secondary>disable-ip-verification</secondary>
      </indexterm>

      <para>通常、DRBD は構成内の IP アドレスがホスト名と一致することを確認する。これらのチェックを無効にするには <option>disable-ip-verification</option> を使用する。</para>
    </definition>
  </drbdsetup_option>

  <drbdsetup_option name="usage-count">
    <term xml:id="usage-count"><option>usage-count
	<group choice="req" rep="norepeat">
	  <arg choice="plain" rep="norepeat">yes</arg>
	  <arg choice="plain" rep="norepeat">no</arg>
	  <arg choice="plain" rep="norepeat">ask</arg>
        </group>
    </option></term>

    <definition>
      <indexterm significance="normal">
	<primary>drbd.conf</primary>

	<secondary>usage-count</secondary>
      </indexterm>

      <para>DRBD の<ulink url="http://usage.drbd.org"><citetitle>オンライン利用カウンター</citetitle></ulink>で説明されているように、DRBD には、どのバージョンを使用しているかを匿名でカウントするメカニズムがある。結果は誰でも見ることができるウェブページ上で公開されている。</para>

      <para>このパラメータは、クラスタノードが利用カウンターに参加するかどうかを定義する。サポートされている値は <option>yes</option>,  <option>no</option>, <option>ask</option>（ユーザーに聞く、デフォルト） である。</para>

      <para>DRBD の開発を推進する貴重なフィードバックを得るため、ユーザーにオンライン利用カウンターへの参加を依頼したいと考えている。</para>
    </definition>
  </drbdsetup_option>

  <drbdsetup_option name="udev-always-use-vnr">
    <term xml:id="udev-always-use-vnr"><option>udev-always-use-vnr</option></term>

    <definition>
      <indexterm significance="normal">
	<primary>drbd.conf</primary>

	<secondary>udev-always-use-vnr</secondary>
      </indexterm>

      <para>udev が drbdadm にデバイス関連のシンボリックリンクのリストを要求すると、drbdadm は、リソースに明示的な <literal>volume VNR { }</literal> 定義があるか、暗黙的なボリューム番号 0 を持つ単一のボリュームしかないかによって、異なる命名規則でシンボリックリンクを提示する：<programlisting><![CDATA[
# implicit single volume without "volume 0 {}" block
DEVICE=drbd<minor>
SYMLINK_BY_RES=drbd/by-res/<resource-name>
SYMLINK_BY_DISK=drbd/by-disk/<backing-disk-name>

# explicit volume definition: volume VNR { }
DEVICE=drbd<minor>
SYMLINK_BY_RES=drbd/by-res/<resource-name>/VNR
SYMLINK_BY_DISK=drbd/by-disk/<backing-disk-name>
]]></programlisting>
	</para>

	<para>global セクションでこのパラメータを定義すると、drbdadm は常に <literal>.../VNR</literal> の部分を追加し、ボリューム定義が暗黙的であるか明示的であるかを気にしない。</para>

	<para>過去との互換性のために、これはデフォルトでは無効になっているが、有効にすることを推奨する。</para>
    </definition>
  </drbdsetup_option>

  <drbdsetup_option name="after-sb-0pri">
    <term xml:id="after-sb-0pri"><option>after-sb-0pri <replaceable>policy</replaceable></option></term>

    <definition>
      <indexterm significance="normal">
	<primary>drbd.conf</primary>

	<secondary>after-sb-0pri</secondary>
      </indexterm>

      <para>スプリットブレインが検出され、2 つのノードのいずれもプライマリでない場合の対応方法を定義する。（2 つのノードが接続されたときにスプリットブレインを検出する、スプリットブレインの決定は常に2つのノード間である） 定義されたポリシーは次のとおり: </para>

      <variablelist>
	<varlistentry>
	  <term><option>disconnect</option></term>

	  <listitem>
	    <para>自動再同期はしない。単に切断する。</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term><option>discard-younger-primary</option></term>
	  <term><option>discard-older-primary</option></term>

	  <listitem>
	    <para>最初（<option>discard-younger-primary</option>）、または最後（<option>discard-older-primary</option>） にプライマリなったノード から再同期する。両方のノードが独立してプライマリになった場合、 <option>discard-least-changes</option> ポリシーが使用される。</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term><option>discard-zero-changes</option></term>

	  <listitem>
	    <para>スプリットブレイン状況が検出されてからノードの 1 つだけがデータを書き込んだ場合は、このノードからもう 1 つのノードに再同期する。両方のノードがデータを書き込んだ場合は切断する。</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term><option>discard-least-changes</option></term>

	  <listitem>
	    <para>より多くの変更されたブロックを持つノードから再同期する。</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term><option>discard-node-<replaceable>nodename</replaceable></option></term>

	  <listitem>
	    <para>名前付きノードと常に再同期する。</para>
	  </listitem>
	</varlistentry>
      </variablelist>
      <!-- FIXME: Refer to rr-conflict. -->
    </definition>
  </drbdsetup_option>

  <drbdsetup_option name="after-sb-1pri">
    <term xml:id="after-sb-1pri"><option>after-sb-1pri <replaceable>policy</replaceable></option></term>

    <definition>
      <indexterm significance="normal">
	<primary>drbd.conf</primary>

	<secondary>after-sb-1pri</secondary>
      </indexterm>

      <para>1 つのノードがプライマリ、もう 1 つのノードをセカンダリのときに、スプリットブレインが検出された場合の対応方法を定義する。（2 つのノードが接続されたときにスプリットブレインを検出する、スプリットブレインの決定は常に2つのノード間である） 定義されたポリシーは次のとおり: </para>

      <variablelist>
	<varlistentry>
	  <term><option>disconnect</option></term>

	  <listitem>
	    <para>自動再同期を行わず接続を切断する。</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term><option>consensus</option></term>

	  <listitem>
	    <para><option>after-sb-0pri</option> アルゴリズムの結果が現在のセカンダリノードのデータを破棄することになる場合、セカンダリノードのデータを破棄する。それ以外の場合は切断する。</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term><option>violently-as0p</option></term>

	  <listitem>
	    <para>プライマリのデータに大きな変更がある場合でも、常に <option>after-sb-0pri</option> アルゴリズムの判断を採用する。このポリシーは <option>allow-two-primaries</option> オプションを指定し、 1 ノードファイルシステム (OCF2 や GFS ではない) を使用している場合のみ有用である。このオプションを使用すると、プライマリノードがクラッシュする可能性があり、推奨しない。</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term xml:id="discard-secondary"><option>discard-secondary</option></term>

	  <listitem>
	    <para>セカンダリノード上のデータを破棄する。</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term xml:id="call-pri-lost-after-sb"><option>call-pri-lost-after-sb</option></term>

	  <listitem>
	    <para>常に <option>after-sb-0pri</option> アルゴリズムの判断を採用する。プライマリノードでデータを破棄することになる場合は、 プライマリノードで <option xml:id="pri-lost-after-sb">pri-lost-after-sb</option> ハンドラを呼び出す。</para>
	  </listitem>
	</varlistentry>
      </variablelist>
      <!-- FIXME: Refer to rr-conflict. -->
    </definition>
  </drbdsetup_option>

  <drbdsetup_option name="after-sb-2pri">
    <term xml:id="after-sb-2pri"><option>after-sb-2pri <replaceable>policy</replaceable></option></term>

    <definition>
      <indexterm significance="normal">
	<primary>drbd.conf</primary>

	<secondary>after-sb-2pri</secondary>
      </indexterm>

      <para>スプリットブレインが検出され、両方のノードがプライマリである場合の対応方法を定義する。（2 つのノードが接続されたときにスプリットブレインを検出する、スプリットブレインの決定は常に2つのノード間である） 定義されたポリシーは次のとおり: </para>

      <variablelist>
	<varlistentry>
	  <term><option>disconnect</option></term>

	  <listitem>
	    <para>自動再同期を行わず接続を切断する。</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term xml:id="violently-as0p"><option>violently-as0p</option></term>

	  <listitem>
	    <para><option>after-sb-1pri</option> の <option>violently-as0p</option> ポリシーを参照。</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term><option>call-pri-lost-after-sb</option></term>

    <listitem>
      <para>そのマシンがセカンダリに降格できる場合を除いて、いずれかのマシンの <option>pri-lost-after-sb</option> ヘルパープログラムを呼び出す。ヘルパープログラムはマシンを再起動することが期待され、ノードをセカンダリにする。どのマシンがヘルパープログラムを実行するかは、 <option>after-sb-0pri</option> ポリシーによって決定される。</para>
    </listitem>
  </varlistentry>
      </variablelist>
      <!-- FIXME: Refer to rr-conflict. -->
    </definition>
  </drbdsetup_option>

  <drbdsetup_option name="allow-two-primaries">
    <term xml:id="allow-two-primaries"><option>allow-two-primaries</option></term>

    <definition>
      <para><indexterm significance="normal">
	  <primary>drbd.conf</primary>

	  <secondary>allow-two-primaries</secondary>
	</indexterm>DRBD デバイスを構成する最も一般的な方法は、一度に 1 つのノードのみをプライマリ（したがって書き込み可能）にすることである。</para>

	<para>いくつかのシナリオでは、2 つのノードを一度にプライマリにしたい場合がある。 DRBD 以外のメカニズムで、共有され複製されたデバイスへの書き込みが調整される方法を使用する必要がある。これは、OCFS2 や GFS などの共有ストレージクラスタファイルシステム、または仮想マシンイメージと仮想マシンを物理マシン間で移動できる仮想マシンマネージャを使用して実行できる。</para>

	<para><option>allow-two-primaries</option> は、2つのノードを同時にプライマリにすることを DRBD に指示する。非分散ファイルシステムを使用する場合は、このオプションを有効にしてはならない。データ破損とノードクラッシュが発生する。</para>
    </definition>
  </drbdsetup_option>

  <drbdsetup_option name="always-asbp">
    <term xml:id="always-asbp"><option>always-asbp</option></term>
    <!-- FIXME: this option does not mke any sense anymore. How can we fix this? -->
    <definition>
      <para>通常、3 番目のノードが存在しないことが現在の UUID 値から明らかな場合のみ、スプリットブレイン発生後の修復ポリシーだけが適用される。</para>

      <para>このオプションを指定すると、両ノードのデータに関連性があるとして、スプリットブレイン発生後のポリシーが適用される。UUID の分析により 3 番目のノードの存在が疑われる場合には、フル同期が行われることがある。(または、なんらかの別の原因によって間違った UUID セットで判断してしまった場合)</para>
    </definition>
  </drbdsetup_option>

  <drbdsetup_option name="connect-int">
    <term xml:id="connect-int"><option>connect-int <replaceable>time</replaceable></option></term>

    <definition>
      <para><indexterm significance="normal">
	  <primary>drbd.conf</primary>

	  <secondary>connect-int</secondary>
	</indexterm>2つのノード間の接続が <command moreinfo="none">drbdsetup connect</command> で構成される、DRBD はすぐに接続を確立しようとする。これが失敗すると、DRBD は<option>connect-int</option> 秒後に接続を試みる。<option>connect-int</option> のデフォルト値は 10 秒である。</para>
    </definition>
  </drbdsetup_option>

  <drbdsetup_option name="cram-hmac-alg">
    <term xml:id="cram-hmac-alg"><option>cram-hmac-alg <replaceable>hash-algorithm</replaceable></option></term>

    <definition>
      <para><indexterm significance="normal">
	  <primary>drbd.conf</primary>

	  <secondary>cram-hmac-alg</secondary>
	</indexterm>対向ノードの認証に使用するハッシュベースのメッセージ認証コード （HMAC） またはセキュアハッシュアルゴリズムを構成する。カーネルはいくつかの異なるアルゴリズムをサポートしており、その中にはカーネルモジュールとしてロード可能なものもある。/proc/crypto にリストされている shash アルゴリズムを参照。デフォルトで <option>cram-hmac-alg</option> は設定されていない。対向ノードの認証には、<option>shared-secret</option> も構成する必要がある。</para>
    </definition>
  </drbdsetup_option>

  <drbdsetup_option name="csums-alg">
    <term xml:id="csum-alg"><option>csums-alg <replaceable>hash-algorithm</replaceable></option></term>

    <definition>
      <para><indexterm significance="normal">
	  <primary>drbd.conf</primary>

	  <secondary>csums-alg</secondary>
	</indexterm>通常、2 つのノードが再同期するとき、同期ターゲットは同期ソースから非同期データ​​を要求し、同期ソースはデータを送信する。多くの使用パターンで、それらのブロックのかなりの数が実際には同一になっている。</para>

	<para><option>csums-alg</option> アルゴリズムが指定されている場合、同期ターゲットは、非同期データの要求と、現在持っているデータのハッシュ値も送信する。同期ソースは、このハッシュ値とそれ自身のバージョンのデータを比較する。ハッシュ値が異なる場合、新しいデータを同期ターゲットに送信し、そうでない場合はデータが同じであることを通知する。これにより、必要なネットワーク帯域幅が削減されるが、CPU 使用率が高くなり、同期ターゲットの I/O が増加する可能性がある。</para>

	<para><option>csums-alg</option> は、カーネルによってサポートされている安全なハッシュアルゴリズムの 1 つに設定できる。 /proc/crypto にリストされている shash アルゴリズムを参照。デフォルトでは、 <option>csums-alg</option> 設定されていない。</para>
    </definition>
  </drbdsetup_option>

  <drbdsetup_option name="csums-after-crash-only">
    <term xml:id="csums-after-crash-only"><option>csums-after-crash-only</option></term>

    <definition>
      <para><indexterm significance="normal">
	  <primary>drbd.conf</primary>

	  <secondary>csums-after-crash-only</secondary>
	</indexterm>このオプション（および上記の csums-alg） を有効にすると、プライマリクラッシュ後の最初の再同期に対してのみチェックサムベースの再同期を使用するが、その後の「ネットワーク復帰」では使用しない。</para>
      <para>ほとんどの場合、再同期が必要であるとマークされたブロックは実際に変更されているため、チェックサムの計算、および再同期ターゲット上のブロックの読み書きはすべてオーバーヘッドである。</para>
      <para>チェックサムベースの再同期の利点は、大部分がプライマリのクラッシュリカバリの後である。リカバリでは、アクティビティログでカバーされるより大きな領域が再同期が必要なものとしてマークされている。8.4.5 から導入された。</para>
    </definition>
  </drbdsetup_option>

  <drbdsetup_option name="data-integrity-alg">
    <term xml:id="data-integrity-alg"><option>data-integrity-alg </option> <replaceable>alg</replaceable></term>

    <definition>
      <indexterm significance="normal">
	<primary>drbd.conf</primary>

	<secondary>data-integrity-alg</secondary>
      </indexterm>

      <para>DRBD は通常、 TCP/IP プロトコルに組み込まれたデータ整合性チェックに依存するが、データ整合性アルゴリズムが設定されている場合は、さらに、このアルゴリズムを使用して、ネットワーク経由で受信したデータが送信者のものと一致することを確認する。データの整合性エラーが検出された場合、DRBD はネットワーク接続を閉じ、再接続し、再同期を行う。</para>

      <para><option>data-integrity-alg</option> は、カーネルによってサポートされている安全なハッシュアルゴリズムの 1 つに設定できる。 /proc/crypto にリストされている shash アルゴリズムを参照。デフォルトでは、このメカニズムは無効である。</para>

      <para>CPU のオーバーヘッドが発生するため、本番環境でこのオプションを使用しないことを推奨する。また、「データ整合性に関する注意」も参照。</para>
    </definition>
  </drbdsetup_option>

  <drbdsetup_option name="ko-count">
    <term xml:id="ko-count"><option>ko-count <replaceable>number</replaceable></option></term>

    <definition>
      <para><indexterm significance="normal">
	  <primary>drbd.conf</primary>

	  <secondary>ko-count</secondary>
	</indexterm>セカンダリノードが書き込みリクエストを <option>timeout</option> 内で <option>ko-count</option> 回以上失敗した場合、そのセカンダリノードはクラスタから排除される。プライマリノードは、このセカンダリノードへの接続をスタンドアロンに設定する。この機能を無効にするには、明示的に 0 に設定する必要がある。デフォルトはバージョン間で変更されている。8.4 は 7 がデフォルト値である。</para>
    </definition>
  </drbdsetup_option>

  <drbdsetup_option name="max-buffers">
	  <term xml:id="max-buffers"><option>max-buffers <replaceable>number</replaceable></option></term>

    <definition>
      <para><indexterm significance="normal">
	  <primary>drbd.conf</primary>

	  <secondary>max-buffers</secondary>
	</indexterm>再同期、オンライン照合を行う際に、受信側で DRBD マイナーデバイスあたりに使用するメモリを制限する。単位は PAGE_SIZE で、ほとんどのシステムで 4KiB である。設定できる最小値は 32 (=128 KiB) でハードコードされている。これらバッファはディスクからの読み書きの際にデータブロックを保持するために使用される。輻輳時のデッドロックを回避するために、この設定はハード制限というよりは閾値として使用される。最大バッファページが使用されると、プールからのそれ以上の割り当てが制限される。受信側の I/O バックエンドに余裕がない場合には、 max-buffers を増やすとよい。</para>
    </definition>
  </drbdsetup_option>

  <drbdsetup_option name="max-epoch-size">
    <term xml:id="max-epoch-size"><option>max-epoch-size <replaceable>number</replaceable></option></term>

    <definition>
      <para><indexterm significance="normal">
	  <primary>drbd.conf</primary>

	  <secondary>max-epoch-size</secondary>
	</indexterm>書き込みバリアを発行する前に DRBD が発行できる書き込みリクエストの最大数を定義する。デフォルト値は 2048 で、最小値は 1 、最大値は 20000 である。このパラメータを 10 未満の値に設定すると、パフォーマンスが低下する可能性がある。</para>
    </definition>
  </drbdsetup_option>

  <drbdsetup_option name="on-congestion">
    <term xml:id="on-congestion"><option>on-congestion <replaceable>policy</replaceable></option></term>

    <term xml:id="congestion-fill"><option>congestion-fill <replaceable>threshold</replaceable></option></term>

    <term xml:id="congestion-extents"><option>congestion-extents
    <replaceable>threshold</replaceable></option></term>

    <definition>
      <para>デフォルトでは、 TCP 送信キューが一杯になると、 DRBD は書き込みをブロックする。これにより、より多くのバッファスペースが再び利用可能になるまで、アプリケーションがさらに書き込みリクエストを生成するのを防ぐ。</para>

      <para>DRBD を DRBD-proxy と一緒に使用する場合は、 送信キューがいっぱいになる前に DRBD を AHEAD/BEAIND モードに切り替える  <option>pull-ahead</option> <option>on-congestion</option>  ポリシーといっしょに使用することが望ましい。DRBD は、自身と対向ノードとの間の違いをビットマップに記録するが、もはや対向ノードに複製はしない。十分なバッファスペースが再び利用可能になると、ノードは対向ノードと同期を再開し、通常の複製に戻る。</para>

      <para>これには、キューがいっぱいになってもアプリケーションの I/O をブロックしないという利点があるが、対向ノードの同期が大幅に遅れるという欠点もある。また、再同期している間、対向ノードは inconsistent(不整合) になる。</para>

      <para>利用可能な congestion ポリシーは <option>block</option> (デフォルト), <option>pull-ahead</option> である。<option>congestion-fill</option> は、この接続で動作中に許可されているデータ量を定義する。デフォルト値は 0 で、この輻輳制御のメカニズムを無効にする（最大 10 ギガバイト）。<option>congestion-extents</option> は、 AHEAD/BEAIND モードに切り替える前にアクティブにできるビットマップエクステントの数を定義する。 <option>al-extents</option> と同じデフォルトと制限をもつ。<option>congestion-extents</option> は、 <option>al-extents</option> より小さい値に設定した場合のみ有効である。</para>

      <para>AHEAD/BEHIND モードは DRBD 8.3.10 から有効である。</para>
    </definition>
  </drbdsetup_option>

  <drbdsetup_option name="ping-int">
    <term xml:id="ping-int"><option>ping-int <replaceable>interval</replaceable></option></term>

    <definition>
      <para><indexterm significance="normal">
	  <primary>drbd.conf</primary>

	  <secondary>ping-int</secondary>
	</indexterm>対向ノードへの TCP/IP 接続で <option>ping-int</option> 秒間に何も通信が行われなかった場合、DRBD はキープアライブパケットを送信して、対向ノードまたはネットワーク接続の失敗がすぐに検出されるようにする。デフォルト値は 10 秒で、最小値は 1 、最大値は 120 秒である。単位は秒である。</para>
    </definition>
  </drbdsetup_option>

  <drbdsetup_option name="ping-timeout">
    <term xml:id="ping-timeout"><option>ping-timeout <replaceable>timeout</replaceable></option></term>

    <definition>
      <para><indexterm significance="normal">
	  <primary>drbd.conf</primary>

	  <secondary>ping-timeout</secondary>
	</indexterm>キープアライブパケットへの応答のタイムアウトを定義する。対向ノードが <option>ping-timeout</option> 間で応答しない場合、 DRBD は接続を終了し、再接続しようとする。デフォルト値は 0.5 秒で、最小値は 0.1 秒、最大値は 3 秒である。単位は 10 分の 1 秒である。</para>
    </definition>
  </drbdsetup_option>

  <drbdsetup_option name="socket-check-timeout">
    <term xml:id="socket-check-timeout"><option>socket-check-timeout <replaceable>timeout</replaceable></option></term>

    <definition>
      <para><indexterm significance="normal">
	  <primary>drbd.conf</primary>

	  <secondary>socket-check-timeout</secondary>
	</indexterm>DRBD-Proxy を使っていて大量のバッファを確保する必要がある環境では ping-timeout に非現実的な大きな値を指定しなければならないことがある。TCP コネクションが開始したときの安定するのを待つ局面でも、 DRBD はデフォルトで ping-timeout を使ってしまう。DRBD-Proxy は通常、同じデータセンターに配置されているため、長い待機時間は DRBD の接続プロセスを妨げる可能性がある。</para>
	<para>このような場合、<option>socket-check-timeout</option> に DRBD と DRBD-Proxy 間の round trip time(RTT) を設定するとよい。たいていの場合 1 である。</para>
	<para>デフォルトの単位は 10 分の 1 秒である。デフォルト値は 0 で socket-check-timeout 値の代わりに <option>ping-timeout</option> 値を使用する。8.4.5 から導入された。</para>
    </definition>
  </drbdsetup_option>

  <drbdsetup_option name="protocol">
    <term xml:id="protocol"><option>protocol <replaceable>name</replaceable></option></term>

    <definition>
      <indexterm significance="normal">
	<primary>drbd.conf</primary>

	<secondary>protocol</secondary>
      </indexterm>

      <para>この接続で指定されたプロトコルを使用する。サポートされているプロトコルは次のとおり: <variablelist>
	  <varlistentry>
	    <term xml:id="A"><option>A</option></term>

	    <listitem>
	      <para>DRBD デバイスへの書き込みは、ローカルディスクへの書き込みと TCP/IP 送信バッファに到達した時点で完了とする。</para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term xml:id="B"><option>B</option></term>

	    <listitem>
	      <para>DRBD デバイスへの書き込みは、ローカルディスクへの書き込みと、すべての対向ノードが書き込みリクエストを受信をした時点で完了とする。</para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term xml:id="C"><option>C</option></term>

	    <listitem>
	      <para>DRBD デバイスへの書き込みは、ローカルディスクとすべてのリモートディスクへの書き込みが終わった時点で完了とする。</para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </para>
    </definition>
  </drbdsetup_option>

  <drbdsetup_option name="rcvbuf-size">
    <term xml:id="rcvbuf-size"><option>rcvbuf-size <replaceable>size</replaceable></option></term>

    <definition>
      <para><indexterm significance="normal">
	  <primary>drbd.conf</primary>

	  <secondary>rcvbuf-size</secondary>
	</indexterm>TCP/IP 受信バッファのサイズを指定する。0（デフォルト） を指定すると、バッファサイズが動的に調整される。このパラメータは通常設定する必要はないが、最大 10MiB まで設定できる。デフォルトの単位はバイトである。</para>
    </definition>
  </drbdsetup_option>

  <drbdsetup_option name="rr-conflict">
    <term xml:id="rr-conflict"><option>rr-conflict</option> <replaceable>policy</replaceable></term>

    <definition>
      <indexterm significance="normal">
	<primary>drbd.conf</primary>

	<secondary>rr-conflict</secondary>
      </indexterm>

      <para>このオプションは、再同期決定の結果がクラスタ内の現在のロール割り当てと互換性がない場合を解決するのに役立つ。定義されたポリシーは次のとおり: </para>

      <variablelist>
	<varlistentry>
	  <term xml:id="disconnect"><option>disconnect</option></term>

	  <listitem>
	    <para>自動再同期を行わず接続を切断する。</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term xml:id="violently"><option>violently</option></term>

	  <listitem>
	    <para>プライマリノードへの再同期が許可され、ブロックデバイス上のデータがノードの 1 つに対して安定しているという前提に反す。<emphasis>このオプションは危険であり、使ってはならない。</emphasis></para> <!-- What would happen? -->
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term xml:id="call-pri-lost"><option>call-pri-lost</option></term>

	  <listitem>
	    <para>どこか 1 つのマシンで <option>pri-lost</option> ハンドラを呼び出す。ハンドラはマシンを再起動することが期待され、ノードをセカンダリにする。</para>
	  </listitem>
	</varlistentry>
      </variablelist>
      <!-- FIXME: It is completely unclear how this option interacts with
	   after-sb-0pri, after-sb-1pri, and after-sb-2pri. -->
      <!-- FIXME: Refer to after-sb-0pri, after-sb-1pri, and after-sb-2pri. -->
    </definition>
  </drbdsetup_option>

  <drbdsetup_option name="shared-secret">
    <term xml:id="shared-secret"><option>shared-secret <replaceable>secret</replaceable></option></term>

    <definition>
      <para><indexterm significance="normal">
	  <primary>drbd.conf</primary>

	  <secondary>shared-secret</secondary>
	</indexterm>対向ノードの認証に使用する共有秘密鍵を設定する。secret は 64 文字までで指定する。対向ノードの認証には、 <option>cram-hmac-alg</option> も設定する必要がある。</para>
    </definition>
  </drbdsetup_option>

  <drbdsetup_option name="sndbuf-size">
    <term xml:id="sndbuf-size"><option>sndbuf-size <replaceable>size</replaceable></option></term>

    <definition>
      <para><indexterm significance="normal">
	  <primary>drbd.conf</primary>

	  <secondary>sndbuf-size</secondary>
	</indexterm>TCP/IP 送信バッファのサイズを指定する。DRBD 8.0.13/8.2.7 以降、 0 （デフォルト） を指定すると、バッファサイズが動的に調整される。32 KiB 未満の値は、この接続のスループットに有害である。大きなバッファサイズは、プロトコル A が遅延の大きいネットワークで使用される場合に特に有用である。サポートされる最大値は 10 MiB である。</para>
    </definition>
  </drbdsetup_option>

  <drbdsetup_option name="tcp-cork">
    <term xml:id="tcp-cork"><option>tcp-cork</option></term>

    <definition>
      <indexterm significance="normal">
	<primary>drbd.conf</primary>

	<secondary>tcp-cork</secondary>
      </indexterm>

      <para>デフォルトで、DRBD は TCP_CORK ソケットオプションを使用して、カーネルが部分的なメッセージを送信しないようにする。その結果、ネットワーク上のパケット量が少なくなり、サイズが大きくなる。一部のネットワークスタックでは、この最適化で悪化する可能性がある。<option>tcp-cork</option> を使用してこの最適化を無効にすることができる。</para>
    </definition>
  </drbdsetup_option>

  <drbdsetup_option name="timeout">
    <term xml:id="timeout"><option>timeout <replaceable>time</replaceable></option></term>

    <definition>
      <para><indexterm significance="normal">
	  <primary>drbd.conf</primary>

	  <secondary>timeout</secondary>
	</indexterm>ネットワークを介した応答のタイムアウトを定義する。対向ノードが指定された <option>timeout</option> 時間内で応答を送信しない場合、対向ノードが死んだと判断して TCP/IP コネクションを切断する。タイムアウト値は、 <option>connect-int</option>、<option>ping-int</option> より小さい値でなければならない。デフォルトは 6 秒である。値は 10 分の 1 秒単位で指定する。</para>
    </definition>
  </drbdsetup_option>

  <drbdsetup_option name="use-rle">
    <term xml:id="use-rle"><option>use-rle</option></term>

    <definition>
      <para><indexterm significance="normal">
	  <primary>drbd.conf</primary>

	  <secondary>use-rle</secondary>
	</indexterm>クラスタノード上の複製された各デバイスには、それぞれの対向ノードデバイス用の個別のビットマップがあある。このビットマップは、ローカルデバイスと対向ノードデバイスの違いを追跡するために使用される。クラスタの状態によっては、デバイスのビットマップ、対向ノードデバイスのビットマップ、または両方のビットマップにディスクが異なるとマークできる。2つのクラスタノードが接続すると、相互のビットマップを交換し、ローカルと対向ノードのビットマップを検査して全体的な違いを判断する。</para>

	<para>非常に大きなデバイスのビットマップは比較的大きいが、通常、ランレングス符号化を使用して非常にうまく圧縮される。これにより、ビットマップ転送の時間と帯域幅を節約できる。</para>

	<para><option>use-rle</option> は run-length エンコーディングを使用するかどうかを指定する。DRBD 8.4.0 以降デフォルトで有効である。</para>
    </definition>
  </drbdsetup_option>

  <drbdsetup_option name="verify-alg">
    <term xml:id="verify-alg"><option>verify-alg <replaceable>hash-algorithm</replaceable></option></term>

    <definition>
      <para>オンライン照合（<command moreinfo="none">drbdadm verify</command>） は、ディスクブロックのチェックサム（すなわち、ハッシュ値）を計算して比較し、それらが異なるかどうかを検出する。<option>verify-alg</option> は、これらのチェックサムに使用するアルゴリズムを決定する。オンライン照合を使用するには、カーネルでサポートされている安全なハッシュアルゴリズムの1つに設定する必要がある。 /proc/crypto にリストされている shash アルゴリズムを参照。</para>

      <para>低負荷の期間（例えば、月に1回）で定期的にオンライン照合をスケジュールすることを推奨する。また、「データ整合性に関する注意」も参照。</para>
    </definition>
  </drbdsetup_option>

  <drbdsetup_option name="discard-my-data">
    <term xml:id="discard-my-data"><option>discard-my-data</option></term>

    <definition>
      <para>ローカルデータを破棄して、最新データを持つ対向ノードと再同期する。スプリットブレイン状態から復旧するときに、このオプションを手作業で指定する。</para>
    </definition>
  </drbdsetup_option>

  <drbdsetup_option name="tentative">
    <term xml:id="tentative"><option>tentative</option></term>

    <definition>
      <para>対向ノードへの接続が確立できるかどうか、および実際に接続を確立したり、再同期を開始したりすることなく、再同期が必要かどうか（また、その方向も）を判断する。<option>--tentative</option> なしだと、DRBD が何をするかシステムログを調べて、確認する。</para>
    </definition>
  </drbdsetup_option>

  <drbdsetup_option name="auto-promote">
    <term xml:id="auto-promote"><option>auto-promote <replaceable>bool-value</replaceable></option></term>

    <definition>
      <indexterm significance="normal">
	<primary>drbd.conf</primary>

	<secondary>auto-promote</secondary>
      </indexterm>

      <para>書き込みのためにデバイスをマウントまたはオープンする前に、リソースをプライマリに昇格させる必要がある。</para>

      <para>DRBD 9 より前は、これを明示的に行う必要があった（ &quot;drbdadm primary&quot;）。DRBD 9 以降、 <option>auto-promote</option> を使用すると、デバイスの 1 つが書き込み用にマウントまたはオープンされるときに、リソースをプライマリに自動的に昇格させることができる。すべてのデバイスがアンマウントされるか、オープンしているユーザがいなくなると、すぐにリソースの役割がセカンダリになる。</para>

      <para>自動プロモーションは、クラスタの状態が許可する場合にのみ成功する（つまり、明示的な <command moreinfo="none">drbdadm primary</command> コマンドが成功するなら）。それ以外の場合は、DRBD 9 より前と同様にデバイスのマウントまたはオープンが失敗する: <citerefentry><refentrytitle>mount</refentrytitle><manvolnum>2</manvolnum></citerefentry> システムコールは、 errno を EROFS（読み取り専用ファイルシステム） に設定して失敗する。<citerefentry><refentrytitle>open</refentrytitle><manvolnum>2</manvolnum></citerefentry> システムコールは、 errno を EMEDIUMTYPE（メディアタイプが間違っている） に設定してが失敗する。</para>

      <para><option>auto-promote</option> の設定に関係なく、デバイスが明示的に昇格された場合 （<command moreinfo="none">drbdadm primary</command>）、明示的に降格する必要がある（<command moreinfo="none">drbdadm secondary</command>）。</para>

      <para><option>auto-promote</option> は DRBD 9.0.0 から有効で、デフォルトは <constant>yes</constant> である。</para>
    </definition>
  </drbdsetup_option>

  <drbdsetup_option name="cpu-mask">
    <term xml:id="cpu-mask"><option>cpu-mask <replaceable>cpu-mask</replaceable></option></term>

    <definition>
      <para><indexterm significance="normal">
	  <primary>drbd.conf</primary>

	  <secondary>cpu-mask</secondary>
	</indexterm>DRBD のカーネルスレッドに CPU アフィニティマスクを設定する。CPU マスクは 16 進数で指定する。デフォルト値は 0 で、スケジューラがどの CPU 上でカーネルスレッドを実行するかを決定する。システムに存在しない <option>cpu-mask</option> CPU番号は無視される。</para>
    </definition>
  </drbdsetup_option>

  <drbdsetup_option name="on-no-data-accessible">
    <term xml:id="on-no-data-accessible"><option>on-no-data-accessible
	<replaceable>policy</replaceable></option></term>

    <definition>
      <para>要求されたデータがローカルまたはリモートで使用できない場合に（たとえば、すべてのディスクに障害が発生した場合など）、どのように I/O 要求を処理するかを決定する。定義されたポリシーは次のとおり: <variablelist>
	  <varlistentry>
	    <term xml:id="io-error"><option>io-error</option></term>
	    <listitem><para>errno を EIO に設定してシステムコールは失敗する。</para></listitem>
	  </varlistentry>
	  <varlistentry>
	    <term xml:id="suspend-io"><option>suspend-io</option></term>
	    <listitem><para>リソースは I/O を中断する。下位レベルのデバイスを接続（再接続）したり、データにアクセスできる対向ノードに接続したり、<command moreinfo="none">drbdadm resume-io <replaceable>res</replaceable></command> で DRBD に I/O を再開させたりすることで、 再開できる。データがない場合、 I/O を強制的に再開すると、 <option>io-error</option> ポリシーと同じ結果になる。</para></listitem>
	  </varlistentry>
	</variablelist>この設定は、DRBD 8.3.9 から有効である。デフォルトのポリシーは <option>io-error</option> である。</para>
    </definition>
  </drbdsetup_option>

  <drbdsetup_option name="peer-ack-window">
    <term xml:id="peer-ack-window"><option>peer-ack-window <replaceable>value</replaceable></option></term>

    <definition>
      <para><indexterm significance="normal">
	  <primary>drbd.conf</primary>

	  <secondary>peer-ack-window</secondary>
	</indexterm>各ノード上の各デバイスのために、DRBD は、ローカルデータと各対向ノードデバイスのリモートデータの差分のビットマップを維持する。例えば、それぞれが単一デバイスを有する 3 ノード構成 （ノード A、B、C） において、各ノードは、各対向ノードに対して 1 つのビットマップを維持する。</para>

      <para>ノードが書き込みリクエストを受け取ると、書き込みノードのビットマップを更新する方法はわかるが、ノード間のビットマップを更新する方法はわからない。この例では、書き込みリクエストがノード A から B および C に伝搬するとき、ノード B および C はノード A と同じデータを有するが、両方が同じデータを有するか不明である。</para>

      <para>是正措置として、書き込みノードは、時には、相手との間にどのような状態があるかを示すピアツーピアパケットを対向ノードに送信する。</para>

      <para><option>peer-ack-window</option>  は、peer-ack パケットを送信する前に、プライマリノードが送信するデータ量を指定する。値が小さいとネットワークトラフィックが増加する。値が大きいとネットワークトラフィックは減少するが、セカンダリノードのメモリ消費量が大きくなり、プライマリノードの障害後に、セカンダリノード間の再同期時間が長くなる。（注：peer-ack パケットは、他の理由でも送信される場合がある。たとえば、メンバーシップの変更または <option>peer-ack-delay</option> タイマーの満了など）。</para>

      <para><option>peer-ack-window</option> のデフォルト値は、2 MiB であり、単位はセクタである。このオプションは 9.0.0 から有効である。</para>
    </definition>
  </drbdsetup_option>

  <drbdsetup_option name="peer-ack-delay">
    <term xml:id="peer-ack-delay"><option>peer-ack-delay <replaceable>expiry-time</replaceable></option></term>

    <definition>
      <para><indexterm significance="normal">
	  <primary>drbd.conf</primary>

	  <secondary>peer-ack-delay</secondary>
	</indexterm>最後に終了した書き込みリクエストの後に <replaceable>expiry-time</replaceable> 間、新しい書き込みリクエストが発行されない場合、peer-ack パケットが送信される。タイマーが満了する前に新しい書き込みリクエストが発行されると、タイマーは <replaceable>expiry-time</replaceable> にリセットされる。（注：peer-ack パケットは、他の理由でも送信される場合がある。たとえば、メンバーシップの変更または <option>peer-ack-window</option> オプションなど）。</para>
      <para>このパラメータは、リモートノードの再同期動作に影響を与える可能性がある。対向ノードは、 AL-extent のロックを解除する peer-ack を受信するまで待つ必要がある。対向ノード間の再同期操作は、これらのロックを待つ必要がある。</para>
      <para><option>peer-ack-delay</option> のデフォルト値は、100 ミリ秒であり、単位はミリ秒である。このオプションは 9.0.0 から有効である。</para>
    </definition>
  </drbdsetup_option>

  <drbdsetup_option name="degr-wfc-timeout">
    <term xml:id="degr-wfc-timeout"><option>degr-wfc-timeout <replaceable>timeout</replaceable></option></term>

    <definition>
      <para><indexterm significance="normal">
	  <primary>drbd.conf</primary>

	  <secondary>degr-wfc-timeout</secondary>
	</indexterm>システムが停止したとき、クラスタが単一ノードで構成されている場合、すべてのピアが接続されるまで待機する時間を定義する。このパラメータは通常、 <option>wfc-timeout</option> より小さい値に設定する。再起動前に到達できなかった対向ノードが再起動後に到達できる可能性は低いため、待機が助けになる可能性は低いということである。</para>

      <para>タイムアウトは秒単位で指定する。デフォルト値は 0 であり、無限のタイムアウトを意味する。<option>wfc-timeout</option> パラーメータも参照。</para>
	<!-- FIXME: How does wfc-timeout vs. degr-wfc-timeout work with
	     more than two nodes in the cluster?  If a cluster is only
	     "degraded" when only one node remains and only one out of
	     three nodes fails, we will still wait for that one node for
	     wfc-timeout, which might be forever. -->
    </definition>
  </drbdsetup_option>

  <drbdsetup_option name="outdated-wfc-timeout">
    <term xml:id="outdated-wfc-timeout"><option>outdated-wfc-timeout <replaceable>timeout</replaceable></option></term>

    <definition>
      <para><indexterm significance="normal">
	  <primary>drbd.conf</primary>

	  <secondary>outdated-wfc-timeout</secondary>
	</indexterm>システムが停止したとき、すべての対向ノードが outdated(無効) であった場合、すべての対向ノードが接続されるまで待機する時間を定義する。このパラメータは通常、 <option>wfc-timeout</option> より小さい値に設定する。outdated(無効) の対向ノードがその間にプライマリになることはできないので、以前に生存していたノードを待つ必要がないということである。</para>

      <para>タイムアウトは秒単位で指定する。デフォルト値は 0 であり、無限のタイムアウトを意味する。<option>wfc-timeout</option> パラーメータも参照。</para>
    </definition>
  </drbdsetup_option>

  <drbdsetup_option name="wait-after-sb">
    <term xml:id="wait-after-sb"><option>wait-after-sb</option></term>

    <definition>
      <para>このパラメータは、スプリットブレイン状況が検出された場合でも、DRBD が init スクリプトで待機し続けるため、ノード間の接続が拒否される。</para>
    </definition>
  </drbdsetup_option>

  <drbdsetup_option name="wfc-timeout">
    <term xml:id="wfc-timeout"><option>wfc-timeout <replaceable>timeout</replaceable></option></term>

    <definition>
      <para><indexterm significance="normal">
	  <primary>drbd.conf</primary>

	  <secondary>wfc-timeout</secondary>
	</indexterm>すべての対向ノードが接続されるまで init スクリプトが待機する時間を定義する。これは、DRBD リソースを管理できないクラスタマネージャと組み合わせて使用​​する場合に便利である。クラスタマネージャが起動すると、DRBD リ ソースはすでに起動して実行されている。Pacemaker などのより優れたクラスターマネージャを使用すると、クラスターマネージャが DRBD リソースを制御できるようになる。タイムアウトは秒単位で指定する。デフォルト値は 0 であり、無限のタイムアウトを意味する。<option>degr-wfc-timeout</option> パラーメータも参照。</para>
    </definition>
  </drbdsetup_option>

  <drbdsetup_option name="quorum">
    <term xml:id="quorum"><option>quorum <replaceable>value</replaceable></option>
    </term>

    <definition>
      <para><indexterm significance="normal">
	  <primary>drbd.conf</primary>

	  <secondary>quorum</secondary>
	  </indexterm>有効にすると、レプリケートされたデータセットを変更するために、クラスタパーティションはクォーラムを必要とする。つまり、クラスタパーティション内のノードは、クラスタパーティションにクォーラムがある場合にのみプライマリに昇格できる。昇格すべきノードにディスクが直接接続されているすべてのノードが対象である。プライマリノードが書き込みリクエストを実行する必要があるが、クラスタパーティションがクォーラムを失った場合、 I/O をフリーズするか、または書き込みリクエストを拒否する（<option>on-no-quorum</option> の設定に依存）。クォーラムが失われると、プライマリは常に <option>quorum-lost</option> ハンドラを呼び出す。ハンドラは通知のためのものであり、リターンコードは無視される。</para>

	  <para>オプションの値は、 <option>off</option>, <option>majority</option>, <option>all</option>, または数値である。数値を設定する場合は、値がノード数の半分を超えていることを確認すること。クォーラムはデータの不一致を回避するメカニズムであり、2 つ以上の複製が存在する場合にフェンシングの代わりに使用されるときがある。デフォルトは <option>off</option> である。</para>

	  <para>切断されたノードがすべて outdated(無効) としてマークされている場合、パーティションのサイズに関係なく、常にクォーラムを持つ。つまり、すべてのセカンダリノードを正常に切断すると、1 つのプライマリが動作し続ける。1 つのセカンダリが切断された瞬間に、切断されたすべてのセカンダリノードがパーティションを形成すると仮定する。パーティションが他のパーティションよりも小さい場合、この時点ではクォーラムは失われる。</para>

	  <para>ディスクレスノードがクォーラムを常に取得できるようにする場合、<option>majority</option>, <option>all</option> オプションは使用しないことを推奨する。クラスタ内のディスクフルノードの完全な数を決定するための DBRD のヒューリスティックな方法は正確でないため、絶対数を指定することを推奨する。</para>

	  <para>クォーラムの実装は、DRBD カーネルドライバのバージョン 9.0.7 から有効である。</para>
    </definition>
  </drbdsetup_option>

  <drbdsetup_option name="quorum-minimum-redundancy">
    <term xml:id="quorum-minimum-redundancy"><option>quorum-minimum-redundancy <replaceable>value</replaceable></option>
    </term>

    <definition>
      <para><indexterm significance="normal">
	  <primary>drbd.conf</primary>

	  <secondary>quorum-minimum-redundancy</secondary>
	  </indexterm>このオプションは、パーティションがクォーラムを獲得できるように UpToDate のディスクを持つノードの必要最小限の数を設定する。これは、素の <option>quorum</option> とは異なる要件である。</para>

	  <para>オプションの値は、 <option>off</option>, <option>majority</option>, <option>all</option>, または数値である。数値を設定する場合は、値がノード数の半分を超えていることを確認すること。</para>

	  <para>ディスクレスノードがクォーラムを常に取得できるようにする場合、<option>majority</option>, <option>all</option> オプションは使用しないことを推奨する。クラスタ内のディスクフルノードの完全な数を決定するための DBRD のヒューリスティックな方法は正確でないため、絶対数を指定することを推奨する。</para>

	  <para>このオプションは、DRBD カーネルドライバのバージョン 9.0.10 から有効である。</para>
    </definition>
  </drbdsetup_option>

  <drbdsetup_option name="on-no-quorum">
    <term xml:id="on-no-quorum"><option>on-no-quorum <group choice="req" rep="norepeat">
    <arg choice="plain" rep="norepeat">io-error</arg>
    <arg choice="plain" rep="norepeat">suspend-io</arg>
    </group>
    </option></term>

    <definition>
      <para><indexterm significance="normal">
	  <primary>drbd.conf</primary>

	  <secondary>quorum</secondary>
	  </indexterm>デフォルトで DRBD はクォーラムを失うと、デバイス上の I/O をフリーズする。<option>on-no-quorum</option> を <option>io-error</option> に設定すると、クォーラムが失われた場合、すべての I/O 操作をエラーで完了する。</para>

	  <para><option>on-no-quorum</option> オプションは、DRBD カーネルドライバのバージョン 9.0.8 から有効である。</para>
    </definition>

  </drbdsetup_option>
</drbdsetup_options>
